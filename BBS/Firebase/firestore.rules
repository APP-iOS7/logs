rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 기본적으로 모든 접근 거부 (시작점)
    match /{document=**} {
      allow read, write: if false;
    }

    // 사용자 프로필: 본인만 읽고 쓸 수 있음 (생성은 로그인 사용자 누구나)
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId; // [69, 145, 146, 147]
      allow create: if request.auth != null;
    }

    // 게시판: 로그인 사용자 읽기 가능, 쓰기는 관리자만 (예시)
    match /boards/{boardId} {
      allow read: if request.auth != null;
      // 쓰기(create, update, delete)는 관리자만 가능하도록 아래 역할 기반 규칙 추가
      allow write: if isAdmin(); // isAdmin() 함수는 아래 정의
    }

    // 게시글: 로그인 사용자 읽기 가능, 생성은 로그인 사용자, 수정/삭제는 작성자 또는 관리자
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isAuthorOrAdmin(request.resource.data.authorId) && canCreatePost(request); // 생성 시 데이터 검증
      allow update: if request.auth != null && isAuthorOrAdmin(resource.data.authorId) && canUpdatePost(request); // 수정 시 작성자/관리자 확인 및 필드 검증
      allow delete: if request.auth != null && isAuthorOrAdmin(resource.data.authorId); // 삭제 시 작성자/관리자 확인
    }

    // 댓글 (서브컬렉션 방식): 로그인 사용자 읽기 가능, 생성은 로그인 사용자, 수정/삭제는 작성자 또는 관리자
    match /posts/{postId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isAuthorOrAdmin(request.resource.data.authorId) && canCreateComment(request); // 생성 시 데이터 검증
      allow update: if request.auth != null && isAuthorOrAdmin(resource.data.authorId) && canUpdateComment(request); // 수정 시 작성자/관리자 확인 및 필드 검증
      allow delete: if request.auth != null && isAuthorOrAdmin(resource.data.authorId); // 삭제 시 작성자/관리자 확인
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // 관리자 확인 (Custom Claims 사용 시)
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true; // [60, 62]
    }
    // 관리자 확인 (별도 컬렉션 사용 시)
    // function isAdmin() {
    //   return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid)); // [60]
    // }

    // 작성자 또는 관리자인지 확인
    function isAuthorOrAdmin(authorId) {
      return (isSignedIn() && request.auth.uid == authorId) || isAdmin();
    }
    // 게시글 생성 시 필수 필드 및 작성자 확인
    function canCreatePost(request) {
       let requiredFields = ['title', 'content', 'authorId', 'authorDisplayName', 'boardId', 'createdAt'];
       return request.resource.data.keys().hasAll(requiredFields) // [141, 148]
              && request.resource.data.authorId == request.auth.uid // 작성자 ID 일치 확인
              && request.resource.data.title is string && request.resource.data.title.size() > 0
              && request.resource.data.content is string && request.resource.data.content.size() > 0
              && request.resource.data.createdAt == request.time; // 서버 타임스탬프 사용 강제
    }

     // 게시글 업데이트 시 작성자 ID, 생성 시간 등 불변 필드 보호
    function canUpdatePost(request) {
       let forbiddenUpdates = ['authorId', 'boardId', 'createdAt'];
       return!request.resource.data.diff(resource.data).affectedKeys().hasAny(forbiddenUpdates) // [148, 149]
              && request.resource.data.title is string && request.resource.data.title.size() > 0
              && request.resource.data.content is string && request.resource.data.content.size() > 0
              && request.resource.data.updatedAt == request.time; // 수정 시간 업데이트 강제
    }

    // 댓글 생성/수정 시 유효성 검사 (예시: 내용 길이 제한)
    function canCreateComment(request) {
        let requiredFields = ['content', 'authorId', 'authorDisplayName', 'postId', 'createdAt'];
        return request.resource.data.keys().hasAll(requiredFields)
               && request.resource.data.authorId == request.auth.uid
               && request.resource.data.content is string
               && request.resource.data.content.size() > 0 && request.resource.data.content.size() < 500 // [141, 150]
               && request.resource.data.createdAt == request.time;
    }
    function canUpdateComment(request) {
         let forbiddenUpdates = ['authorId', 'postId', 'createdAt'];
         return !request.resource.data.diff(resource.data).affectedKeys().hasAny(forbiddenUpdates)
                && request.resource.data.content is string
                && request.resource.data.content.size() > 0 && request.resource.data.content.size() < 500;
    }
  }
}